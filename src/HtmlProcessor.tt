/*
Copyright (c) 2010, 2011 Clifford Champion

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>

<#
	var namespaceAsString = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");

	EnvDTE.Project dteProject;
	{
		IServiceProvider hostServiceProvider = (IServiceProvider)Host;
		EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
		Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
		dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
	}

	List<EnvDTE.ProjectItem> htmlItems = new List<EnvDTE.ProjectItem>();
	FindHtmlItems(htmlItems, dteProject.ProjectItems);
#>


// Sharp UI generated classes for project <#= dteProject.Name #>	

<# foreach(EnvDTE.ProjectItem pi in htmlItems) { #>
<# OutputHtmlPartialClass(pi); #>
<# } #>



<#+ 
	private void FindHtmlItems(List<EnvDTE.ProjectItem> list, EnvDTE.ProjectItems items)
	{
		foreach(EnvDTE.ProjectItem pi in items)
		{
			if(pi.FileNames[0].EndsWith(".html"))
			{
				list.Add(pi);
			}
			else if(pi.FileNames[0].EndsWith("\\") && pi.ProjectItems.Count > 0)
			{
				FindHtmlItems(list, pi.ProjectItems);
			}
		}
	}

	private void OutputHtmlPartialClass(EnvDTE.ProjectItem item)
	{
		string itemName = new String(item.Name.Reverse().Skip(".html".Length).Reverse().ToArray());
		string itemFilename = item.FileNames[0];
		string itemContents = File.ReadAllText(item.FileNames[0]);
		if(itemContents.TrimStart().StartsWith("namespace"))
		{
			return;
		}

		// is there a sister .cs file?
		string itemCSFilename = itemFilename + ".cs";
				
		if(!File.Exists(itemCSFilename))
		{
			return;
		}

		// lookup the namespace from the .cs file
		string namespaceAsString;
		{
			string itemCSContents = File.ReadAllText(itemCSFilename);
			Match match = Regex.Match(itemCSContents, "namespace ([A-Za-z0-9.]+)");
			if(!match.Success)
			{
				return;
			}
			namespaceAsString = match.Groups[1].Captures[0].Value;
		}

		
#> 




namespace <#= namespaceAsString #>
{
	partial class <#= itemName #> 
	{ 
		protected readonly string Template = 
@"<#= itemContents.Replace("\"", "\"\"") #>";

	}
}



<#+	
	}
#>